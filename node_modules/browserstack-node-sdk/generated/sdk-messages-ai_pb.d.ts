// package: browserstack.sdk.v1
// file: sdk-messages-ai.proto

import * as jspb from "google-protobuf";

export class AIBrowserExtensionRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getBrowserName(): string;
  setBrowserName(value: string): void;

  getBrowserVersion(): string;
  setBrowserVersion(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AIBrowserExtensionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AIBrowserExtensionRequest): AIBrowserExtensionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AIBrowserExtensionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AIBrowserExtensionRequest;
  static deserializeBinaryFromReader(message: AIBrowserExtensionRequest, reader: jspb.BinaryReader): AIBrowserExtensionRequest;
}

export namespace AIBrowserExtensionRequest {
  export type AsObject = {
    binSessionId: string,
    browserName: string,
    browserVersion: string,
  }
}

export class AIBrowserExtensionResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasExtension$(): boolean;
  clearExtension$(): void;
  getExtension$(): string;
  setExtension$(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AIBrowserExtensionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AIBrowserExtensionResponse): AIBrowserExtensionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AIBrowserExtensionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AIBrowserExtensionResponse;
  static deserializeBinaryFromReader(message: AIBrowserExtensionResponse, reader: jspb.BinaryReader): AIBrowserExtensionResponse;
}

export namespace AIBrowserExtensionResponse {
  export type AsObject = {
    success: boolean,
    extension: string,
    error: string,
  }
}

export class AISelfHealGetRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  hasPlatformIndex(): boolean;
  clearPlatformIndex(): void;
  getPlatformIndex(): string;
  setPlatformIndex(value: string): void;

  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  getLocatorType(): string;
  setLocatorType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AISelfHealGetRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AISelfHealGetRequest): AISelfHealGetRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AISelfHealGetRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AISelfHealGetRequest;
  static deserializeBinaryFromReader(message: AISelfHealGetRequest, reader: jspb.BinaryReader): AISelfHealGetRequest;
}

export namespace AISelfHealGetRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: string,
    frameworkSessionId: string,
    locatorType: string,
  }
}

export class AISelfHealGetResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  hasLocatorType(): boolean;
  clearLocatorType(): void;
  getLocatorType(): string;
  setLocatorType(value: string): void;

  hasLocatorValue(): boolean;
  clearLocatorValue(): void;
  getLocatorValue(): string;
  setLocatorValue(value: string): void;

  hasAiHealing(): boolean;
  clearAiHealing(): void;
  getAiHealing(): boolean;
  setAiHealing(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AISelfHealGetResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AISelfHealGetResponse): AISelfHealGetResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AISelfHealGetResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AISelfHealGetResponse;
  static deserializeBinaryFromReader(message: AISelfHealGetResponse, reader: jspb.BinaryReader): AISelfHealGetResponse;
}

export namespace AISelfHealGetResponse {
  export type AsObject = {
    success: boolean,
    frameworkSessionId: string,
    locatorType: string,
    locatorValue: string,
    aiHealing: boolean,
    error: string,
  }
}

export class AISelfHealStepRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  hasPlatformIndex(): boolean;
  clearPlatformIndex(): void;
  getPlatformIndex(): string;
  setPlatformIndex(value: string): void;

  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  getIsSuccess(): boolean;
  setIsSuccess(value: boolean): void;

  getLocatorType(): string;
  setLocatorType(value: string): void;

  getLocatorValue(): string;
  setLocatorValue(value: string): void;

  getTestName(): string;
  setTestName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AISelfHealStepRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AISelfHealStepRequest): AISelfHealStepRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AISelfHealStepRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AISelfHealStepRequest;
  static deserializeBinaryFromReader(message: AISelfHealStepRequest, reader: jspb.BinaryReader): AISelfHealStepRequest;
}

export namespace AISelfHealStepRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: string,
    frameworkSessionId: string,
    isSuccess: boolean,
    locatorType: string,
    locatorValue: string,
    testName: string,
  }
}

export class AISelfHealStepResponse extends jspb.Message {
  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  getExecuteScript(): string;
  setExecuteScript(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AISelfHealStepResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AISelfHealStepResponse): AISelfHealStepResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AISelfHealStepResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AISelfHealStepResponse;
  static deserializeBinaryFromReader(message: AISelfHealStepResponse, reader: jspb.BinaryReader): AISelfHealStepResponse;
}

export namespace AISelfHealStepResponse {
  export type AsObject = {
    frameworkSessionId: string,
    executeScript: string,
  }
}


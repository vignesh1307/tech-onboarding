// package: browserstack.sdk.v1
// file: sdk-messages-observability.proto

import * as jspb from "google-protobuf";
import * as sdk_messages_testhub_pb from "./sdk-messages-testhub_pb";

export class KeyMessage extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getMessage(): string;
  setMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): KeyMessage.AsObject;
  static toObject(includeInstance: boolean, msg: KeyMessage): KeyMessage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: KeyMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): KeyMessage;
  static deserializeBinaryFromReader(message: KeyMessage, reader: jspb.BinaryReader): KeyMessage;
}

export namespace KeyMessage {
  export type AsObject = {
    key: string,
    message: string,
  }
}

export class Observability extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasOptions(): boolean;
  clearOptions(): void;
  getOptions(): Observability.ObservabilityOptions | undefined;
  setOptions(value?: Observability.ObservabilityOptions): void;

  hasErrorTraceId(): boolean;
  clearErrorTraceId(): void;
  getErrorTraceId(): string;
  setErrorTraceId(value: string): void;

  hasCode(): boolean;
  clearCode(): void;
  getCode(): string;
  setCode(value: string): void;

  clearErrorsList(): void;
  getErrorsList(): Array<KeyMessage>;
  setErrorsList(value: Array<KeyMessage>): void;
  addErrors(value?: KeyMessage, index?: number): KeyMessage;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Observability.AsObject;
  static toObject(includeInstance: boolean, msg: Observability): Observability.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Observability, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Observability;
  static deserializeBinaryFromReader(message: Observability, reader: jspb.BinaryReader): Observability;
}

export namespace Observability {
  export type AsObject = {
    success: boolean,
    options?: Observability.ObservabilityOptions.AsObject,
    errorTraceId: string,
    code: string,
    errorsList: Array<KeyMessage.AsObject>,
  }

  export class ObservabilityOptions extends jspb.Message {
    hasAllowScreenshots(): boolean;
    clearAllowScreenshots(): void;
    getAllowScreenshots(): string;
    setAllowScreenshots(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ObservabilityOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ObservabilityOptions): ObservabilityOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ObservabilityOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ObservabilityOptions;
    static deserializeBinaryFromReader(message: ObservabilityOptions, reader: jspb.BinaryReader): ObservabilityOptions;
  }

  export namespace ObservabilityOptions {
    export type AsObject = {
      allowScreenshots: string,
    }
  }
}

export class ObservabilityConfigRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getTestFrameworkName(): string;
  setTestFrameworkName(value: string): void;

  getTestFrameworkVersion(): string;
  setTestFrameworkVersion(value: string): void;

  hasHubUrl(): boolean;
  clearHubUrl(): void;
  getHubUrl(): string;
  setHubUrl(value: string): void;

  hasCapabilities(): boolean;
  clearCapabilities(): void;
  getCapabilities(): string;
  setCapabilities(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ObservabilityConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ObservabilityConfigRequest): ObservabilityConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ObservabilityConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ObservabilityConfigRequest;
  static deserializeBinaryFromReader(message: ObservabilityConfigRequest, reader: jspb.BinaryReader): ObservabilityConfigRequest;
}

export namespace ObservabilityConfigRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    testFrameworkName: string,
    testFrameworkVersion: string,
    hubUrl: string,
    capabilities: string,
  }
}

export class ObservabilityConfigResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasTesthub(): boolean;
  clearTesthub(): void;
  getTesthub(): sdk_messages_testhub_pb.TestHub | undefined;
  setTesthub(value?: sdk_messages_testhub_pb.TestHub): void;

  hasObservability(): boolean;
  clearObservability(): void;
  getObservability(): Observability | undefined;
  setObservability(value?: Observability): void;

  hasCapabilities(): boolean;
  clearCapabilities(): void;
  getCapabilities(): string;
  setCapabilities(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ObservabilityConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ObservabilityConfigResponse): ObservabilityConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ObservabilityConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ObservabilityConfigResponse;
  static deserializeBinaryFromReader(message: ObservabilityConfigResponse, reader: jspb.BinaryReader): ObservabilityConfigResponse;
}

export namespace ObservabilityConfigResponse {
  export type AsObject = {
    success: boolean,
    testhub?: sdk_messages_testhub_pb.TestHub.AsObject,
    observability?: Observability.AsObject,
    capabilities: string,
  }
}


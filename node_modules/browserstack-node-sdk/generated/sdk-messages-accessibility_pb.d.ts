// package: browserstack.sdk.v1
// file: sdk-messages-accessibility.proto

import * as jspb from "google-protobuf";
import * as sdk_messages_observability_pb from "./sdk-messages-observability_pb";
import * as sdk_messages_testhub_pb from "./sdk-messages-testhub_pb";

export class Accessibility extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasOptions(): boolean;
  clearOptions(): void;
  getOptions(): Accessibility.AccessibilityOptions | undefined;
  setOptions(value?: Accessibility.AccessibilityOptions): void;

  hasErrorTraceId(): boolean;
  clearErrorTraceId(): void;
  getErrorTraceId(): string;
  setErrorTraceId(value: string): void;

  hasCode(): boolean;
  clearCode(): void;
  getCode(): string;
  setCode(value: string): void;

  clearErrorsList(): void;
  getErrorsList(): Array<sdk_messages_observability_pb.KeyMessage>;
  setErrorsList(value: Array<sdk_messages_observability_pb.KeyMessage>): void;
  addErrors(value?: sdk_messages_observability_pb.KeyMessage, index?: number): sdk_messages_observability_pb.KeyMessage;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Accessibility.AsObject;
  static toObject(includeInstance: boolean, msg: Accessibility): Accessibility.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Accessibility, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Accessibility;
  static deserializeBinaryFromReader(message: Accessibility, reader: jspb.BinaryReader): Accessibility;
}

export namespace Accessibility {
  export type AsObject = {
    success: boolean,
    options?: Accessibility.AccessibilityOptions.AsObject,
    errorTraceId: string,
    code: string,
    errorsList: Array<sdk_messages_observability_pb.KeyMessage.AsObject>,
  }

  export class AccessibilityOptions extends jspb.Message {
    hasStatus(): boolean;
    clearStatus(): void;
    getStatus(): string;
    setStatus(value: string): void;

    clearCapabilitiesList(): void;
    getCapabilitiesList(): Array<Accessibility.AccessibilityOptions.AccessibilityCapability>;
    setCapabilitiesList(value: Array<Accessibility.AccessibilityOptions.AccessibilityCapability>): void;
    addCapabilities(value?: Accessibility.AccessibilityOptions.AccessibilityCapability, index?: number): Accessibility.AccessibilityOptions.AccessibilityCapability;

    clearScriptsList(): void;
    getScriptsList(): Array<Accessibility.AccessibilityOptions.AccessibilityScript>;
    setScriptsList(value: Array<Accessibility.AccessibilityOptions.AccessibilityScript>): void;
    addScripts(value?: Accessibility.AccessibilityOptions.AccessibilityScript, index?: number): Accessibility.AccessibilityOptions.AccessibilityScript;

    hasCommandsToWrap(): boolean;
    clearCommandsToWrap(): void;
    getCommandsToWrap(): Accessibility.AccessibilityOptions.AccessibilityCommandsToWrap | undefined;
    setCommandsToWrap(value?: Accessibility.AccessibilityOptions.AccessibilityCommandsToWrap): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AccessibilityOptions.AsObject;
    static toObject(includeInstance: boolean, msg: AccessibilityOptions): AccessibilityOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AccessibilityOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AccessibilityOptions;
    static deserializeBinaryFromReader(message: AccessibilityOptions, reader: jspb.BinaryReader): AccessibilityOptions;
  }

  export namespace AccessibilityOptions {
    export type AsObject = {
      status: string,
      capabilitiesList: Array<Accessibility.AccessibilityOptions.AccessibilityCapability.AsObject>,
      scriptsList: Array<Accessibility.AccessibilityOptions.AccessibilityScript.AsObject>,
      commandsToWrap?: Accessibility.AccessibilityOptions.AccessibilityCommandsToWrap.AsObject,
    }

    export class AccessibilityCommandsToWrap extends jspb.Message {
      clearScriptsToRunList(): void;
      getScriptsToRunList(): Array<string>;
      setScriptsToRunList(value: Array<string>): void;
      addScriptsToRun(value: string, index?: number): string;

      clearCommandsList(): void;
      getCommandsList(): Array<Accessibility.AccessibilityOptions.AccessibilityCommand>;
      setCommandsList(value: Array<Accessibility.AccessibilityOptions.AccessibilityCommand>): void;
      addCommands(value?: Accessibility.AccessibilityOptions.AccessibilityCommand, index?: number): Accessibility.AccessibilityOptions.AccessibilityCommand;

      serializeBinary(): Uint8Array;
      toObject(includeInstance?: boolean): AccessibilityCommandsToWrap.AsObject;
      static toObject(includeInstance: boolean, msg: AccessibilityCommandsToWrap): AccessibilityCommandsToWrap.AsObject;
      static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
      static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
      static serializeBinaryToWriter(message: AccessibilityCommandsToWrap, writer: jspb.BinaryWriter): void;
      static deserializeBinary(bytes: Uint8Array): AccessibilityCommandsToWrap;
      static deserializeBinaryFromReader(message: AccessibilityCommandsToWrap, reader: jspb.BinaryReader): AccessibilityCommandsToWrap;
    }

    export namespace AccessibilityCommandsToWrap {
      export type AsObject = {
        scriptsToRunList: Array<string>,
        commandsList: Array<Accessibility.AccessibilityOptions.AccessibilityCommand.AsObject>,
      }
    }

    export class AccessibilityCommand extends jspb.Message {
      getName(): string;
      setName(value: string): void;

      getLibrary(): string;
      setLibrary(value: string): void;

      getModule(): string;
      setModule(value: string): void;

      getClass(): string;
      setClass(value: string): void;

      getMethod(): string;
      setMethod(value: string): void;

      serializeBinary(): Uint8Array;
      toObject(includeInstance?: boolean): AccessibilityCommand.AsObject;
      static toObject(includeInstance: boolean, msg: AccessibilityCommand): AccessibilityCommand.AsObject;
      static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
      static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
      static serializeBinaryToWriter(message: AccessibilityCommand, writer: jspb.BinaryWriter): void;
      static deserializeBinary(bytes: Uint8Array): AccessibilityCommand;
      static deserializeBinaryFromReader(message: AccessibilityCommand, reader: jspb.BinaryReader): AccessibilityCommand;
    }

    export namespace AccessibilityCommand {
      export type AsObject = {
        name: string,
        library: string,
        module: string,
        pb_class: string,
        method: string,
      }
    }

    export class AccessibilityScript extends jspb.Message {
      getName(): string;
      setName(value: string): void;

      getCommand(): string;
      setCommand(value: string): void;

      serializeBinary(): Uint8Array;
      toObject(includeInstance?: boolean): AccessibilityScript.AsObject;
      static toObject(includeInstance: boolean, msg: AccessibilityScript): AccessibilityScript.AsObject;
      static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
      static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
      static serializeBinaryToWriter(message: AccessibilityScript, writer: jspb.BinaryWriter): void;
      static deserializeBinary(bytes: Uint8Array): AccessibilityScript;
      static deserializeBinaryFromReader(message: AccessibilityScript, reader: jspb.BinaryReader): AccessibilityScript;
    }

    export namespace AccessibilityScript {
      export type AsObject = {
        name: string,
        command: string,
      }
    }

    export class AccessibilityCapability extends jspb.Message {
      getName(): string;
      setName(value: string): void;

      getValue(): string;
      setValue(value: string): void;

      serializeBinary(): Uint8Array;
      toObject(includeInstance?: boolean): AccessibilityCapability.AsObject;
      static toObject(includeInstance: boolean, msg: AccessibilityCapability): AccessibilityCapability.AsObject;
      static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
      static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
      static serializeBinaryToWriter(message: AccessibilityCapability, writer: jspb.BinaryWriter): void;
      static deserializeBinary(bytes: Uint8Array): AccessibilityCapability;
      static deserializeBinaryFromReader(message: AccessibilityCapability, reader: jspb.BinaryReader): AccessibilityCapability;
    }

    export namespace AccessibilityCapability {
      export type AsObject = {
        name: string,
        value: string,
      }
    }
  }
}

export class AccessibilityConfigRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getFrameworkName(): string;
  setFrameworkName(value: string): void;

  getFrameworkVersion(): string;
  setFrameworkVersion(value: string): void;

  getHubUrl(): string;
  setHubUrl(value: string): void;

  hasCapabilities(): boolean;
  clearCapabilities(): void;
  getCapabilities(): Uint8Array | string;
  getCapabilities_asU8(): Uint8Array;
  getCapabilities_asB64(): string;
  setCapabilities(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccessibilityConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AccessibilityConfigRequest): AccessibilityConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccessibilityConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccessibilityConfigRequest;
  static deserializeBinaryFromReader(message: AccessibilityConfigRequest, reader: jspb.BinaryReader): AccessibilityConfigRequest;
}

export namespace AccessibilityConfigRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    frameworkName: string,
    frameworkVersion: string,
    hubUrl: string,
    capabilities: Uint8Array | string,
  }
}

export class AccessibilityConfigResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasTesthub(): boolean;
  clearTesthub(): void;
  getTesthub(): sdk_messages_testhub_pb.TestHub | undefined;
  setTesthub(value?: sdk_messages_testhub_pb.TestHub): void;

  hasAccessibility(): boolean;
  clearAccessibility(): void;
  getAccessibility(): Accessibility | undefined;
  setAccessibility(value?: Accessibility): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccessibilityConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AccessibilityConfigResponse): AccessibilityConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccessibilityConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccessibilityConfigResponse;
  static deserializeBinaryFromReader(message: AccessibilityConfigResponse, reader: jspb.BinaryReader): AccessibilityConfigResponse;
}

export namespace AccessibilityConfigResponse {
  export type AsObject = {
    success: boolean,
    testhub?: sdk_messages_testhub_pb.TestHub.AsObject,
    accessibility?: Accessibility.AsObject,
  }
}


// source: sdk-messages-observability.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var sdk$messages$testhub_pb = require('./sdk-messages-testhub_pb.js');
goog.object.extend(proto, sdk$messages$testhub_pb);
goog.exportSymbol('proto.browserstack.sdk.v1.KeyMessage', null, global);
goog.exportSymbol('proto.browserstack.sdk.v1.Observability', null, global);
goog.exportSymbol('proto.browserstack.sdk.v1.Observability.ObservabilityOptions', null, global);
goog.exportSymbol('proto.browserstack.sdk.v1.ObservabilityConfigRequest', null, global);
goog.exportSymbol('proto.browserstack.sdk.v1.ObservabilityConfigResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.browserstack.sdk.v1.KeyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.browserstack.sdk.v1.KeyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.browserstack.sdk.v1.KeyMessage.displayName = 'proto.browserstack.sdk.v1.KeyMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.browserstack.sdk.v1.Observability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.browserstack.sdk.v1.Observability.repeatedFields_, null);
};
goog.inherits(proto.browserstack.sdk.v1.Observability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.browserstack.sdk.v1.Observability.displayName = 'proto.browserstack.sdk.v1.Observability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.browserstack.sdk.v1.Observability.ObservabilityOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.browserstack.sdk.v1.Observability.ObservabilityOptions.displayName = 'proto.browserstack.sdk.v1.Observability.ObservabilityOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.browserstack.sdk.v1.ObservabilityConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.browserstack.sdk.v1.ObservabilityConfigRequest.displayName = 'proto.browserstack.sdk.v1.ObservabilityConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.browserstack.sdk.v1.ObservabilityConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.browserstack.sdk.v1.ObservabilityConfigResponse.displayName = 'proto.browserstack.sdk.v1.ObservabilityConfigResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.browserstack.sdk.v1.KeyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.browserstack.sdk.v1.KeyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.KeyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.browserstack.sdk.v1.KeyMessage}
 */
proto.browserstack.sdk.v1.KeyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.browserstack.sdk.v1.KeyMessage;
  return proto.browserstack.sdk.v1.KeyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.browserstack.sdk.v1.KeyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.browserstack.sdk.v1.KeyMessage}
 */
proto.browserstack.sdk.v1.KeyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.browserstack.sdk.v1.KeyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.browserstack.sdk.v1.KeyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.KeyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.KeyMessage} returns this
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.KeyMessage} returns this
 */
proto.browserstack.sdk.v1.KeyMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.browserstack.sdk.v1.Observability.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.browserstack.sdk.v1.Observability.prototype.toObject = function(opt_includeInstance) {
  return proto.browserstack.sdk.v1.Observability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.browserstack.sdk.v1.Observability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.Observability.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    options: (f = msg.getOptions()) && proto.browserstack.sdk.v1.Observability.ObservabilityOptions.toObject(includeInstance, f),
    errorTraceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.browserstack.sdk.v1.KeyMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.browserstack.sdk.v1.Observability}
 */
proto.browserstack.sdk.v1.Observability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.browserstack.sdk.v1.Observability;
  return proto.browserstack.sdk.v1.Observability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.browserstack.sdk.v1.Observability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.browserstack.sdk.v1.Observability}
 */
proto.browserstack.sdk.v1.Observability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.browserstack.sdk.v1.Observability.ObservabilityOptions;
      reader.readMessage(value,proto.browserstack.sdk.v1.Observability.ObservabilityOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorTraceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = new proto.browserstack.sdk.v1.KeyMessage;
      reader.readMessage(value,proto.browserstack.sdk.v1.KeyMessage.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.browserstack.sdk.v1.Observability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.browserstack.sdk.v1.Observability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.browserstack.sdk.v1.Observability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.Observability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.browserstack.sdk.v1.Observability.ObservabilityOptions.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.browserstack.sdk.v1.KeyMessage.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.browserstack.sdk.v1.Observability.ObservabilityOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowScreenshots: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.browserstack.sdk.v1.Observability.ObservabilityOptions;
  return proto.browserstack.sdk.v1.Observability.ObservabilityOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllowScreenshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.browserstack.sdk.v1.Observability.ObservabilityOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string allow_screenshots = 1;
 * @return {string}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.getAllowScreenshots = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions} returns this
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.setAllowScreenshots = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.Observability.ObservabilityOptions} returns this
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.clearAllowScreenshots = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.Observability.ObservabilityOptions.prototype.hasAllowScreenshots = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.browserstack.sdk.v1.Observability.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ObservabilityOptions options = 2;
 * @return {?proto.browserstack.sdk.v1.Observability.ObservabilityOptions}
 */
proto.browserstack.sdk.v1.Observability.prototype.getOptions = function() {
  return /** @type{?proto.browserstack.sdk.v1.Observability.ObservabilityOptions} */ (
    jspb.Message.getWrapperField(this, proto.browserstack.sdk.v1.Observability.ObservabilityOptions, 2));
};


/**
 * @param {?proto.browserstack.sdk.v1.Observability.ObservabilityOptions|undefined} value
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
*/
proto.browserstack.sdk.v1.Observability.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.Observability.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string error_trace_id = 3;
 * @return {string}
 */
proto.browserstack.sdk.v1.Observability.prototype.getErrorTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.setErrorTraceId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.clearErrorTraceId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.Observability.prototype.hasErrorTraceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.browserstack.sdk.v1.Observability.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.clearCode = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.Observability.prototype.hasCode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated KeyMessage errors = 5;
 * @return {!Array<!proto.browserstack.sdk.v1.KeyMessage>}
 */
proto.browserstack.sdk.v1.Observability.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.browserstack.sdk.v1.KeyMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.browserstack.sdk.v1.KeyMessage, 5));
};


/**
 * @param {!Array<!proto.browserstack.sdk.v1.KeyMessage>} value
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
*/
proto.browserstack.sdk.v1.Observability.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.browserstack.sdk.v1.KeyMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.browserstack.sdk.v1.KeyMessage}
 */
proto.browserstack.sdk.v1.Observability.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.browserstack.sdk.v1.KeyMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.browserstack.sdk.v1.Observability} returns this
 */
proto.browserstack.sdk.v1.Observability.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.browserstack.sdk.v1.ObservabilityConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    binSessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platformIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    testFrameworkName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    testFrameworkVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hubUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    capabilities: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.browserstack.sdk.v1.ObservabilityConfigRequest;
  return proto.browserstack.sdk.v1.ObservabilityConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinSessionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatformIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestFrameworkName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestFrameworkVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHubUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapabilities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.browserstack.sdk.v1.ObservabilityConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatformIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTestFrameworkName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTestFrameworkVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string bin_session_id = 1;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getBinSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setBinSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 platform_index = 2;
 * @return {number}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getPlatformIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setPlatformIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string test_framework_name = 3;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getTestFrameworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setTestFrameworkName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string test_framework_version = 4;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getTestFrameworkVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setTestFrameworkVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hub_url = 5;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getHubUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setHubUrl = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.clearHubUrl = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.hasHubUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string capabilities = 6;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.getCapabilities = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.setCapabilities = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigRequest} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.clearCapabilities = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigRequest.prototype.hasCapabilities = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.browserstack.sdk.v1.ObservabilityConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    testhub: (f = msg.getTesthub()) && sdk$messages$testhub_pb.TestHub.toObject(includeInstance, f),
    observability: (f = msg.getObservability()) && proto.browserstack.sdk.v1.Observability.toObject(includeInstance, f),
    capabilities: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.browserstack.sdk.v1.ObservabilityConfigResponse;
  return proto.browserstack.sdk.v1.ObservabilityConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new sdk$messages$testhub_pb.TestHub;
      reader.readMessage(value,sdk$messages$testhub_pb.TestHub.deserializeBinaryFromReader);
      msg.setTesthub(value);
      break;
    case 3:
      var value = new proto.browserstack.sdk.v1.Observability;
      reader.readMessage(value,proto.browserstack.sdk.v1.Observability.deserializeBinaryFromReader);
      msg.setObservability(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapabilities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.browserstack.sdk.v1.ObservabilityConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTesthub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      sdk$messages$testhub_pb.TestHub.serializeBinaryToWriter
    );
  }
  f = message.getObservability();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.browserstack.sdk.v1.Observability.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional TestHub testhub = 2;
 * @return {?proto.browserstack.sdk.v1.TestHub}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.getTesthub = function() {
  return /** @type{?proto.browserstack.sdk.v1.TestHub} */ (
    jspb.Message.getWrapperField(this, sdk$messages$testhub_pb.TestHub, 2));
};


/**
 * @param {?proto.browserstack.sdk.v1.TestHub|undefined} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
*/
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.setTesthub = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.clearTesthub = function() {
  return this.setTesthub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.hasTesthub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Observability observability = 3;
 * @return {?proto.browserstack.sdk.v1.Observability}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.getObservability = function() {
  return /** @type{?proto.browserstack.sdk.v1.Observability} */ (
    jspb.Message.getWrapperField(this, proto.browserstack.sdk.v1.Observability, 3));
};


/**
 * @param {?proto.browserstack.sdk.v1.Observability|undefined} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
*/
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.setObservability = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.clearObservability = function() {
  return this.setObservability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.hasObservability = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string capabilities = 4;
 * @return {string}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.getCapabilities = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.setCapabilities = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.browserstack.sdk.v1.ObservabilityConfigResponse} returns this
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.clearCapabilities = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.browserstack.sdk.v1.ObservabilityConfigResponse.prototype.hasCapabilities = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.browserstack.sdk.v1);

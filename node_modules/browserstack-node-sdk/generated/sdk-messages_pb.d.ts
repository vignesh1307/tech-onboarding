// package: browserstack.sdk.v1
// file: sdk-messages.proto

import * as jspb from "google-protobuf";
import * as sdk_messages_testhub_pb from "./sdk-messages-testhub_pb";
import * as sdk_messages_observability_pb from "./sdk-messages-observability_pb";
import * as sdk_messages_accessibility_pb from "./sdk-messages-accessibility_pb";
import * as sdk_messages_percy_pb from "./sdk-messages-percy_pb";

export class DriverInitRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getRef(): string;
  setRef(value: string): void;

  getUserInputParams(): Uint8Array | string;
  getUserInputParams_asU8(): Uint8Array;
  getUserInputParams_asB64(): string;
  setUserInputParams(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DriverInitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DriverInitRequest): DriverInitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DriverInitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DriverInitRequest;
  static deserializeBinaryFromReader(message: DriverInitRequest, reader: jspb.BinaryReader): DriverInitRequest;
}

export namespace DriverInitRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    ref: string,
    userInputParams: Uint8Array | string,
  }
}

export class DriverInitResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getCapabilities(): Uint8Array | string;
  getCapabilities_asU8(): Uint8Array;
  getCapabilities_asB64(): string;
  setCapabilities(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DriverInitResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DriverInitResponse): DriverInitResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DriverInitResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DriverInitResponse;
  static deserializeBinaryFromReader(message: DriverInitResponse, reader: jspb.BinaryReader): DriverInitResponse;
}

export namespace DriverInitResponse {
  export type AsObject = {
    success: boolean,
    binSessionId: string,
    capabilities: Uint8Array | string,
  }
}

export class AutomationFrameworkInitRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getFrameworkName(): string;
  setFrameworkName(value: string): void;

  getFrameworkVersion(): string;
  setFrameworkVersion(value: string): void;

  getRef(): string;
  setRef(value: string): void;

  getHubUrl(): string;
  setHubUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkInitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkInitRequest): AutomationFrameworkInitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkInitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkInitRequest;
  static deserializeBinaryFromReader(message: AutomationFrameworkInitRequest, reader: jspb.BinaryReader): AutomationFrameworkInitRequest;
}

export namespace AutomationFrameworkInitRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    frameworkName: string,
    frameworkVersion: string,
    ref: string,
    hubUrl: string,
  }
}

export class AutomationFrameworkInitResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasHubUrl(): boolean;
  clearHubUrl(): void;
  getHubUrl(): string;
  setHubUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkInitResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkInitResponse): AutomationFrameworkInitResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkInitResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkInitResponse;
  static deserializeBinaryFromReader(message: AutomationFrameworkInitResponse, reader: jspb.BinaryReader): AutomationFrameworkInitResponse;
}

export namespace AutomationFrameworkInitResponse {
  export type AsObject = {
    success: boolean,
    hubUrl: string,
  }
}

export class AutomationFrameworkStartRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getFrameworkName(): string;
  setFrameworkName(value: string): void;

  getFrameworkVersion(): string;
  setFrameworkVersion(value: string): void;

  getRef(): string;
  setRef(value: string): void;

  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  getHubUrl(): string;
  setHubUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkStartRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkStartRequest): AutomationFrameworkStartRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkStartRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkStartRequest;
  static deserializeBinaryFromReader(message: AutomationFrameworkStartRequest, reader: jspb.BinaryReader): AutomationFrameworkStartRequest;
}

export namespace AutomationFrameworkStartRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    frameworkName: string,
    frameworkVersion: string,
    ref: string,
    frameworkSessionId: string,
    hubUrl: string,
  }
}

export class AutomationFrameworkStartResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkStartResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkStartResponse): AutomationFrameworkStartResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkStartResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkStartResponse;
  static deserializeBinaryFromReader(message: AutomationFrameworkStartResponse, reader: jspb.BinaryReader): AutomationFrameworkStartResponse;
}

export namespace AutomationFrameworkStartResponse {
  export type AsObject = {
    success: boolean,
  }
}

export class AutomationFrameworkStopRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getFrameworkName(): string;
  setFrameworkName(value: string): void;

  getFrameworkVersion(): string;
  setFrameworkVersion(value: string): void;

  getRef(): string;
  setRef(value: string): void;

  getFrameworkSessionId(): string;
  setFrameworkSessionId(value: string): void;

  getHubUrl(): string;
  setHubUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkStopRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkStopRequest): AutomationFrameworkStopRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkStopRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkStopRequest;
  static deserializeBinaryFromReader(message: AutomationFrameworkStopRequest, reader: jspb.BinaryReader): AutomationFrameworkStopRequest;
}

export namespace AutomationFrameworkStopRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    frameworkName: string,
    frameworkVersion: string,
    ref: string,
    frameworkSessionId: string,
    hubUrl: string,
  }
}

export class AutomationFrameworkStopResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AutomationFrameworkStopResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AutomationFrameworkStopResponse): AutomationFrameworkStopResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AutomationFrameworkStopResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AutomationFrameworkStopResponse;
  static deserializeBinaryFromReader(message: AutomationFrameworkStopResponse, reader: jspb.BinaryReader): AutomationFrameworkStopResponse;
}

export namespace AutomationFrameworkStopResponse {
  export type AsObject = {
    success: boolean,
  }
}

export class FindNearestHubRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindNearestHubRequest.AsObject;
  static toObject(includeInstance: boolean, msg: FindNearestHubRequest): FindNearestHubRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindNearestHubRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindNearestHubRequest;
  static deserializeBinaryFromReader(message: FindNearestHubRequest, reader: jspb.BinaryReader): FindNearestHubRequest;
}

export namespace FindNearestHubRequest {
  export type AsObject = {
    binSessionId: string,
  }
}

export class FindNearestHubResponse extends jspb.Message {
  getUrl(): string;
  setUrl(value: string): void;

  getLatency(): number;
  setLatency(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindNearestHubResponse.AsObject;
  static toObject(includeInstance: boolean, msg: FindNearestHubResponse): FindNearestHubResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindNearestHubResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindNearestHubResponse;
  static deserializeBinaryFromReader(message: FindNearestHubResponse, reader: jspb.BinaryReader): FindNearestHubResponse;
}

export namespace FindNearestHubResponse {
  export type AsObject = {
    url: string,
    latency: number,
  }
}

export class StartBinSessionRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getSdkLanguage(): string;
  setSdkLanguage(value: string): void;

  getSdkVersion(): string;
  setSdkVersion(value: string): void;

  getPathProject(): string;
  setPathProject(value: string): void;

  getPathConfig(): string;
  setPathConfig(value: string): void;

  getEnvVarsMap(): jspb.Map<string, string>;
  clearEnvVarsMap(): void;
  clearCliArgsList(): void;
  getCliArgsList(): Array<string>;
  setCliArgsList(value: Array<string>): void;
  addCliArgs(value: string, index?: number): string;

  clearFrameworksList(): void;
  getFrameworksList(): Array<string>;
  setFrameworksList(value: Array<string>): void;
  addFrameworks(value: string, index?: number): string;

  getFrameworkVersionsMap(): jspb.Map<string, string>;
  clearFrameworkVersionsMap(): void;
  getLanguage(): string;
  setLanguage(value: string): void;

  hasLanguageVersion(): boolean;
  clearLanguageVersion(): void;
  getLanguageVersion(): string;
  setLanguageVersion(value: string): void;

  getTestFramework(): string;
  setTestFramework(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartBinSessionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StartBinSessionRequest): StartBinSessionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartBinSessionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartBinSessionRequest;
  static deserializeBinaryFromReader(message: StartBinSessionRequest, reader: jspb.BinaryReader): StartBinSessionRequest;
}

export namespace StartBinSessionRequest {
  export type AsObject = {
    binSessionId: string,
    sdkLanguage: string,
    sdkVersion: string,
    pathProject: string,
    pathConfig: string,
    envVarsMap: Array<[string, string]>,
    cliArgsList: Array<string>,
    frameworksList: Array<string>,
    frameworkVersionsMap: Array<[string, string]>,
    language: string,
    languageVersion: string,
    testFramework: string,
  }
}

export class StartBinSessionResponse extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getConfig(): string;
  setConfig(value: string): void;

  hasTesthub(): boolean;
  clearTesthub(): void;
  getTesthub(): sdk_messages_testhub_pb.TestHub | undefined;
  setTesthub(value?: sdk_messages_testhub_pb.TestHub): void;

  hasObservability(): boolean;
  clearObservability(): void;
  getObservability(): sdk_messages_observability_pb.Observability | undefined;
  setObservability(value?: sdk_messages_observability_pb.Observability): void;

  hasAccessibility(): boolean;
  clearAccessibility(): void;
  getAccessibility(): sdk_messages_accessibility_pb.Accessibility | undefined;
  setAccessibility(value?: sdk_messages_accessibility_pb.Accessibility): void;

  hasPercy(): boolean;
  clearPercy(): void;
  getPercy(): sdk_messages_percy_pb.Percy | undefined;
  setPercy(value?: sdk_messages_percy_pb.Percy): void;

  hasCliArgs(): boolean;
  clearCliArgs(): void;
  getCliArgs(): string;
  setCliArgs(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartBinSessionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StartBinSessionResponse): StartBinSessionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartBinSessionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartBinSessionResponse;
  static deserializeBinaryFromReader(message: StartBinSessionResponse, reader: jspb.BinaryReader): StartBinSessionResponse;
}

export namespace StartBinSessionResponse {
  export type AsObject = {
    binSessionId: string,
    config: string,
    testhub?: sdk_messages_testhub_pb.TestHub.AsObject,
    observability?: sdk_messages_observability_pb.Observability.AsObject,
    accessibility?: sdk_messages_accessibility_pb.Accessibility.AsObject,
    percy?: sdk_messages_percy_pb.Percy.AsObject,
    cliArgs: string,
  }
}

export class ConnectBinSessionResponse extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getConfig(): string;
  setConfig(value: string): void;

  hasTesthub(): boolean;
  clearTesthub(): void;
  getTesthub(): sdk_messages_testhub_pb.TestHub | undefined;
  setTesthub(value?: sdk_messages_testhub_pb.TestHub): void;

  hasObservability(): boolean;
  clearObservability(): void;
  getObservability(): sdk_messages_observability_pb.Observability | undefined;
  setObservability(value?: sdk_messages_observability_pb.Observability): void;

  hasAccessibility(): boolean;
  clearAccessibility(): void;
  getAccessibility(): sdk_messages_accessibility_pb.Accessibility | undefined;
  setAccessibility(value?: sdk_messages_accessibility_pb.Accessibility): void;

  hasPercy(): boolean;
  clearPercy(): void;
  getPercy(): sdk_messages_percy_pb.Percy | undefined;
  setPercy(value?: sdk_messages_percy_pb.Percy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectBinSessionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectBinSessionResponse): ConnectBinSessionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectBinSessionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectBinSessionResponse;
  static deserializeBinaryFromReader(message: ConnectBinSessionResponse, reader: jspb.BinaryReader): ConnectBinSessionResponse;
}

export namespace ConnectBinSessionResponse {
  export type AsObject = {
    binSessionId: string,
    config: string,
    testhub?: sdk_messages_testhub_pb.TestHub.AsObject,
    observability?: sdk_messages_observability_pb.Observability.AsObject,
    accessibility?: sdk_messages_accessibility_pb.Accessibility.AsObject,
    percy?: sdk_messages_percy_pb.Percy.AsObject,
  }
}

export class StopBinSessionRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  hasExitCode(): boolean;
  clearExitCode(): void;
  getExitCode(): number;
  setExitCode(value: number): void;

  hasExitSignal(): boolean;
  clearExitSignal(): void;
  getExitSignal(): string;
  setExitSignal(value: string): void;

  hasExitReason(): boolean;
  clearExitReason(): void;
  getExitReason(): string;
  setExitReason(value: string): void;

  hasCustomMetadata(): boolean;
  clearCustomMetadata(): void;
  getCustomMetadata(): string;
  setCustomMetadata(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StopBinSessionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StopBinSessionRequest): StopBinSessionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StopBinSessionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StopBinSessionRequest;
  static deserializeBinaryFromReader(message: StopBinSessionRequest, reader: jspb.BinaryReader): StopBinSessionRequest;
}

export namespace StopBinSessionRequest {
  export type AsObject = {
    binSessionId: string,
    exitCode: number,
    exitSignal: string,
    exitReason: string,
    customMetadata: string,
  }
}

export class StopBinSessionResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  hasAutomateBuildlink(): boolean;
  clearAutomateBuildlink(): void;
  getAutomateBuildlink(): string;
  setAutomateBuildlink(value: string): void;

  hasHashedId(): boolean;
  clearHashedId(): void;
  getHashedId(): string;
  setHashedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StopBinSessionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StopBinSessionResponse): StopBinSessionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StopBinSessionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StopBinSessionResponse;
  static deserializeBinaryFromReader(message: StopBinSessionResponse, reader: jspb.BinaryReader): StopBinSessionResponse;
}

export namespace StopBinSessionResponse {
  export type AsObject = {
    success: boolean,
    error: string,
    automateBuildlink: string,
    hashedId: string,
  }
}

export class PlaywrightConfigRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getConfig(): string;
  setConfig(value: string): void;

  getRef(): string;
  setRef(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PlaywrightConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PlaywrightConfigRequest): PlaywrightConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PlaywrightConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PlaywrightConfigRequest;
  static deserializeBinaryFromReader(message: PlaywrightConfigRequest, reader: jspb.BinaryReader): PlaywrightConfigRequest;
}

export namespace PlaywrightConfigRequest {
  export type AsObject = {
    binSessionId: string,
    config: string,
    ref: string,
  }
}

export class PlaywrightConfigResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  getConfig(): string;
  setConfig(value: string): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PlaywrightConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PlaywrightConfigResponse): PlaywrightConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PlaywrightConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PlaywrightConfigResponse;
  static deserializeBinaryFromReader(message: PlaywrightConfigResponse, reader: jspb.BinaryReader): PlaywrightConfigResponse;
}

export namespace PlaywrightConfigResponse {
  export type AsObject = {
    success: boolean,
    config: string,
    error: string,
  }
}

export class ConnectBinSessionRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  hasPlatformIndex(): boolean;
  clearPlatformIndex(): void;
  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectBinSessionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectBinSessionRequest): ConnectBinSessionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectBinSessionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectBinSessionRequest;
  static deserializeBinaryFromReader(message: ConnectBinSessionRequest, reader: jspb.BinaryReader): ConnectBinSessionRequest;
}

export namespace ConnectBinSessionRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
  }
}

export class TestFrameworkEventRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getTestFrameworkName(): string;
  setTestFrameworkName(value: string): void;

  getTestFrameworkVersion(): string;
  setTestFrameworkVersion(value: string): void;

  getUuid(): string;
  setUuid(value: string): void;

  getEventJson(): Uint8Array | string;
  getEventJson_asU8(): Uint8Array;
  getEventJson_asB64(): string;
  setEventJson(value: Uint8Array | string): void;

  getTestFrameworkState(): string;
  setTestFrameworkState(value: string): void;

  getTestHookState(): string;
  setTestHookState(value: string): void;

  getStartedAt(): string;
  setStartedAt(value: string): void;

  hasEndedAt(): boolean;
  clearEndedAt(): void;
  getEndedAt(): string;
  setEndedAt(value: string): void;

  hasExecutionContext(): boolean;
  clearExecutionContext(): void;
  getExecutionContext(): ExecutionContext | undefined;
  setExecutionContext(value?: ExecutionContext): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TestFrameworkEventRequest.AsObject;
  static toObject(includeInstance: boolean, msg: TestFrameworkEventRequest): TestFrameworkEventRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TestFrameworkEventRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TestFrameworkEventRequest;
  static deserializeBinaryFromReader(message: TestFrameworkEventRequest, reader: jspb.BinaryReader): TestFrameworkEventRequest;
}

export namespace TestFrameworkEventRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    testFrameworkName: string,
    testFrameworkVersion: string,
    uuid: string,
    eventJson: Uint8Array | string,
    testFrameworkState: string,
    testHookState: string,
    startedAt: string,
    endedAt: string,
    executionContext?: ExecutionContext.AsObject,
  }
}

export class ExecutionContext extends jspb.Message {
  getThreadId(): string;
  setThreadId(value: string): void;

  hasProcessId(): boolean;
  clearProcessId(): void;
  getProcessId(): string;
  setProcessId(value: string): void;

  hasHash(): boolean;
  clearHash(): void;
  getHash(): string;
  setHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExecutionContext.AsObject;
  static toObject(includeInstance: boolean, msg: ExecutionContext): ExecutionContext.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExecutionContext, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExecutionContext;
  static deserializeBinaryFromReader(message: ExecutionContext, reader: jspb.BinaryReader): ExecutionContext;
}

export namespace ExecutionContext {
  export type AsObject = {
    threadId: string,
    processId: string,
    hash: string,
  }
}

export class TestFrameworkEventResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TestFrameworkEventResponse.AsObject;
  static toObject(includeInstance: boolean, msg: TestFrameworkEventResponse): TestFrameworkEventResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TestFrameworkEventResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TestFrameworkEventResponse;
  static deserializeBinaryFromReader(message: TestFrameworkEventResponse, reader: jspb.BinaryReader): TestFrameworkEventResponse;
}

export namespace TestFrameworkEventResponse {
  export type AsObject = {
    success: boolean,
    error: string,
  }
}

export class EnqueueTestEventRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getEventUrl(): string;
  setEventUrl(value: string): void;

  getEventDataJson(): Uint8Array | string;
  getEventDataJson_asU8(): Uint8Array;
  getEventDataJson_asB64(): string;
  setEventDataJson(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EnqueueTestEventRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EnqueueTestEventRequest): EnqueueTestEventRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EnqueueTestEventRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EnqueueTestEventRequest;
  static deserializeBinaryFromReader(message: EnqueueTestEventRequest, reader: jspb.BinaryReader): EnqueueTestEventRequest;
}

export namespace EnqueueTestEventRequest {
  export type AsObject = {
    binSessionId: string,
    eventUrl: string,
    eventDataJson: Uint8Array | string,
  }
}

export class EnqueueTestEventResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EnqueueTestEventResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EnqueueTestEventResponse): EnqueueTestEventResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EnqueueTestEventResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EnqueueTestEventResponse;
  static deserializeBinaryFromReader(message: EnqueueTestEventResponse, reader: jspb.BinaryReader): EnqueueTestEventResponse;
}

export namespace EnqueueTestEventResponse {
  export type AsObject = {
    success: boolean,
    error: string,
  }
}

export class LogCreatedEventRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  clearLogsList(): void;
  getLogsList(): Array<LogCreatedEventRequest.LogEntry>;
  setLogsList(value: Array<LogCreatedEventRequest.LogEntry>): void;
  addLogs(value?: LogCreatedEventRequest.LogEntry, index?: number): LogCreatedEventRequest.LogEntry;

  hasExecutionContext(): boolean;
  clearExecutionContext(): void;
  getExecutionContext(): ExecutionContext | undefined;
  setExecutionContext(value?: ExecutionContext): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogCreatedEventRequest.AsObject;
  static toObject(includeInstance: boolean, msg: LogCreatedEventRequest): LogCreatedEventRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LogCreatedEventRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogCreatedEventRequest;
  static deserializeBinaryFromReader(message: LogCreatedEventRequest, reader: jspb.BinaryReader): LogCreatedEventRequest;
}

export namespace LogCreatedEventRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    logsList: Array<LogCreatedEventRequest.LogEntry.AsObject>,
    executionContext?: ExecutionContext.AsObject,
  }

  export class LogEntry extends jspb.Message {
    getTestFrameworkName(): string;
    setTestFrameworkName(value: string): void;

    getTestFrameworkVersion(): string;
    setTestFrameworkVersion(value: string): void;

    getTestFrameworkState(): string;
    setTestFrameworkState(value: string): void;

    getTimestamp(): string;
    setTimestamp(value: string): void;

    getUuid(): string;
    setUuid(value: string): void;

    getKind(): string;
    setKind(value: string): void;

    getMessage(): Uint8Array | string;
    getMessage_asU8(): Uint8Array;
    getMessage_asB64(): string;
    setMessage(value: Uint8Array | string): void;

    hasLevel(): boolean;
    clearLevel(): void;
    getLevel(): string;
    setLevel(value: string): void;

    hasFileName(): boolean;
    clearFileName(): void;
    getFileName(): string;
    setFileName(value: string): void;

    hasFileSize(): boolean;
    clearFileSize(): void;
    getFileSize(): number;
    setFileSize(value: number): void;

    hasFilePath(): boolean;
    clearFilePath(): void;
    getFilePath(): string;
    setFilePath(value: string): void;

    hasAttachmentType(): boolean;
    clearAttachmentType(): void;
    getAttachmentType(): string;
    setAttachmentType(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): LogEntry.AsObject;
    static toObject(includeInstance: boolean, msg: LogEntry): LogEntry.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: LogEntry, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): LogEntry;
    static deserializeBinaryFromReader(message: LogEntry, reader: jspb.BinaryReader): LogEntry;
  }

  export namespace LogEntry {
    export type AsObject = {
      testFrameworkName: string,
      testFrameworkVersion: string,
      testFrameworkState: string,
      timestamp: string,
      uuid: string,
      kind: string,
      message: Uint8Array | string,
      level: string,
      fileName: string,
      fileSize: number,
      filePath: string,
      attachmentType: string,
    }
  }
}

export class LogCreatedEventResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogCreatedEventResponse.AsObject;
  static toObject(includeInstance: boolean, msg: LogCreatedEventResponse): LogCreatedEventResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LogCreatedEventResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogCreatedEventResponse;
  static deserializeBinaryFromReader(message: LogCreatedEventResponse, reader: jspb.BinaryReader): LogCreatedEventResponse;
}

export namespace LogCreatedEventResponse {
  export type AsObject = {
    success: boolean,
    error: string,
  }
}

export class TestSessionEventRequest extends jspb.Message {
  getBinSessionId(): string;
  setBinSessionId(value: string): void;

  getPlatformIndex(): number;
  setPlatformIndex(value: number): void;

  getTestFrameworkName(): string;
  setTestFrameworkName(value: string): void;

  getTestFrameworkVersion(): string;
  setTestFrameworkVersion(value: string): void;

  getTestFrameworkState(): string;
  setTestFrameworkState(value: string): void;

  getTestHookState(): string;
  setTestHookState(value: string): void;

  getTestUuid(): string;
  setTestUuid(value: string): void;

  clearAutomationSessionsList(): void;
  getAutomationSessionsList(): Array<TestSessionEventRequest.AutomationSession>;
  setAutomationSessionsList(value: Array<TestSessionEventRequest.AutomationSession>): void;
  addAutomationSessions(value?: TestSessionEventRequest.AutomationSession, index?: number): TestSessionEventRequest.AutomationSession;

  hasExecutionContext(): boolean;
  clearExecutionContext(): void;
  getExecutionContext(): ExecutionContext | undefined;
  setExecutionContext(value?: ExecutionContext): void;

  hasCapabilities(): boolean;
  clearCapabilities(): void;
  getCapabilities(): Uint8Array | string;
  getCapabilities_asU8(): Uint8Array;
  getCapabilities_asB64(): string;
  setCapabilities(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TestSessionEventRequest.AsObject;
  static toObject(includeInstance: boolean, msg: TestSessionEventRequest): TestSessionEventRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TestSessionEventRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TestSessionEventRequest;
  static deserializeBinaryFromReader(message: TestSessionEventRequest, reader: jspb.BinaryReader): TestSessionEventRequest;
}

export namespace TestSessionEventRequest {
  export type AsObject = {
    binSessionId: string,
    platformIndex: number,
    testFrameworkName: string,
    testFrameworkVersion: string,
    testFrameworkState: string,
    testHookState: string,
    testUuid: string,
    automationSessionsList: Array<TestSessionEventRequest.AutomationSession.AsObject>,
    executionContext?: ExecutionContext.AsObject,
    capabilities: Uint8Array | string,
  }

  export class AutomationSession extends jspb.Message {
    getProvider(): string;
    setProvider(value: string): void;

    hasProduct(): boolean;
    clearProduct(): void;
    getProduct(): string;
    setProduct(value: string): void;

    getFrameworkName(): string;
    setFrameworkName(value: string): void;

    getFrameworkVersion(): string;
    setFrameworkVersion(value: string): void;

    getFrameworkSessionId(): string;
    setFrameworkSessionId(value: string): void;

    hasRef(): boolean;
    clearRef(): void;
    getRef(): string;
    setRef(value: string): void;

    hasHubUrl(): boolean;
    clearHubUrl(): void;
    getHubUrl(): string;
    setHubUrl(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AutomationSession.AsObject;
    static toObject(includeInstance: boolean, msg: AutomationSession): AutomationSession.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AutomationSession, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AutomationSession;
    static deserializeBinaryFromReader(message: AutomationSession, reader: jspb.BinaryReader): AutomationSession;
  }

  export namespace AutomationSession {
    export type AsObject = {
      provider: string,
      product: string,
      frameworkName: string,
      frameworkVersion: string,
      frameworkSessionId: string,
      ref: string,
      hubUrl: string,
    }
  }
}

export class TestSessionEventResponse extends jspb.Message {
  getSuccess(): boolean;
  setSuccess(value: boolean): void;

  hasError(): boolean;
  clearError(): void;
  getError(): string;
  setError(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TestSessionEventResponse.AsObject;
  static toObject(includeInstance: boolean, msg: TestSessionEventResponse): TestSessionEventResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TestSessionEventResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TestSessionEventResponse;
  static deserializeBinaryFromReader(message: TestSessionEventResponse, reader: jspb.BinaryReader): TestSessionEventResponse;
}

export namespace TestSessionEventResponse {
  export type AsObject = {
    success: boolean,
    error: string,
  }
}

